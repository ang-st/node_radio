{
  "name": "nodeshout",
  "version": "0.0.2",
  "description": "Native libshout bindings for node.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Deniz Gurkaynak",
    "email": "dgurkaynak@gmail.com"
  },
  "homepage": "https://github.com/dgurkaynak/nodeshout",
  "repository": {
    "type": "git",
    "url": "https://github.com/dgurkaynak/nodeshout.git"
  },
  "bugs": {
    "url": "https://github.com/dgurkaynak/nodeshout/issues"
  },
  "keywords": [
    "libshout",
    "icecast",
    "stream",
    "radio"
  ],
  "license": "ISC",
  "dependencies": {
    "ffi": "1.3.0",
    "ref": "1.0.0",
    "ref-array": "1.1.0",
    "ref-struct": "1.0.0"
  },
  "gitHead": "b3ec0c66c8600c6a5af0bd2295ba98fb9aa4b42a",
  "readme": "nodeshout\n===================\nNative libshout bindings for node.js. \n\n> Libshout allows applications to easily communicate and broadcast to an Icecast streaming media server. It handles the socket connections, metadata communication, and data streaming for the calling application, and lets developers focus on feature sets instead of implementation details.\n\nMore detail: http://icecast.org\n\nUsage\n-------------\nYou have to install libshout library before using nodeshout. If you work on OS X, you can install via homebrew.\n\n    brew install libshout\n\nThen, install nodeshout via npm.\n    \n    npm install nodeshout\n\nInitalize nodeshout library, create a `Shout` instance and configure it.\n\n    // Initalize\n    nodeshout.init();\n    \n    // Create a shout instance\n    var shout = nodeshout.create();\n    \n    // Configure it\n    shout.setHost('localhost');\n    shout.setPort(8000);\n    shout.setUser('source');\n    shout.setPassword('password');\n    shout.setMount('mount');\n    shout.setFormat(1); // 0=ogg, 1=mp3\n    shout.setAudioInfo('bitrate', '192');\n    shout.setAudioInfo('samplerate', '44100');\n    shout.setAudioInfo('channels', '2');\n    \nOpen the connection.\n    \n    shout.open();\n\nIf connection is successful, above function will return `nodeshout.ErrorTypes.SUCCESS` which is integer `0`. After successful connection, you can send audio file chunks via `shout.send` method.\n\n    shout.send(buffer, bytesRead);\n\nFor the synchronization, there is 2 method provided. First one is `shout.sync()` method, this method blocks current thread. Second one is `shout.delay()` method, this method returns how many milliseconds you should wait to send next audio chunk.\n\nExample\n-------------\nCheck the example in examples folder for simple usage.\n",
  "readmeFilename": "README.md",
  "_id": "nodeshout@0.0.2",
  "_shasum": "e43be5617f9d2ee771a202abae8e246efec68ed3",
  "_from": "../../../../tmp/npm-16089-9c6b1fbe/git-cache-5d38795c9f74/b3ec0c66c8600c6a5af0bd2295ba98fb9aa4b42a",
  "_resolved": "git+https://github.com/ang-st/nodeshout#b3ec0c66c8600c6a5af0bd2295ba98fb9aa4b42a"
}
